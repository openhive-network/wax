"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import asset_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class claim_reward_balance(google.protobuf.message.Message):
    """An operation claim_reward_balance_operation is used to transfer previously collected
    author and/or curation rewards from sub balance for the reward to regular balances.
    Rewards expressed in Hive and HBD are transferred to liquid balances, rewards in HP increase vesting balance.
    When claimed, HP rewards are immediately active towards governance voting power (compare with transfer_to_vesting_operation).

    @param {string} account - Account name.
    @param {asset} reward_hive - The amount of Hive reward to be transferred to liquid balance.
    @param {asset} reward_hbd - The amount of HBD reward to be transferred to liquid balance
    @param {asset} reward_vests - The amount of HP reward to be transferred to vesting balance.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACCOUNT_FIELD_NUMBER: builtins.int
    REWARD_HIVE_FIELD_NUMBER: builtins.int
    REWARD_HBD_FIELD_NUMBER: builtins.int
    REWARD_VESTS_FIELD_NUMBER: builtins.int
    account: builtins.str
    @property
    def reward_hive(self) -> asset_pb2.asset: ...
    @property
    def reward_hbd(self) -> asset_pb2.asset: ...
    @property
    def reward_vests(self) -> asset_pb2.asset: ...
    def __init__(
        self,
        *,
        account: builtins.str | None = ...,
        reward_hive: asset_pb2.asset | None = ...,
        reward_hbd: asset_pb2.asset | None = ...,
        reward_vests: asset_pb2.asset | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["account", b"account", "reward_hbd", b"reward_hbd", "reward_hive", b"reward_hive", "reward_vests", b"reward_vests"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["account", b"account", "reward_hbd", b"reward_hbd", "reward_hive", b"reward_hive", "reward_vests", b"reward_vests"]) -> None: ...

global___claim_reward_balance = claim_reward_balance
