stages:
  - build
  - test
  - tag
  - build_production
  - deploy

variables:
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-7
  CI_BASE_IMAGE_TAG: "@sha256:8f68baf07c6e581e1e8034a1447c4ff1268239fc886bfe4b02aa3f4182bf78bb"
  CI_BASE_IMAGE: "registry.gitlab.syncad.com/hive/hive/ci-base-image${CI_BASE_IMAGE_TAG}"
  # colors:
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"
  NPM_TOKEN: $CI_JOB_TOKEN

include:
  - project: 'hive/common-ci-configuration'
    ref: ac35c204e1b836c9be2ad4cd59aaa89f4ee48c3f # develop
    file: '/templates/wasm_build.gitlab-ci.yml'

image: "${CI_BASE_IMAGE}"

.shared_tags: &shared_tags
  - hived-for-tests

.configuration:
  before_script:
    - python3 -V
    - poetry self update
    - pip list
  tags: *shared_tags

.build_wheel_base:
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Building wheel...${TXT_CLEAR}"
    - git fetch --tags --force
    - rm -rf dist/
    - poetry build --format wheel
    - ls -al dist/
  artifacts:
    when: always
    paths:
      - "dist/"
      - ".build/logs/"
      - ".build/*.so"

build_wheel:
  stage: build
  extends: .build_wheel_base

wax_wasm_build:
  extends: .wasm_build_job_template
  stage: build
  variables:
    SOURCE_DIR: "${CI_PROJECT_DIR}/wasm/src/"
    BINARIES_DIR: "${CI_PROJECT_DIR}/build_wasm"

  tags:
    - public-runner-docker

wax_wasm_package_generation:
  stage: build
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$NPM_TOKEN"
    NPM_SCOPE: "@hive"
    NPM_REGISTRY: "gitlab.syncad.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"
  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
  artifacts:
    paths:
      - "$CI_PROJECT_DIR/package.json"

    when: always
    expire_in: 1 week

  tags:
    - public-runner-docker

test_importing_wax:
  stage: test
  extends: .configuration
  needs:
    - job: build_wheel
      artifacts: true
  script:
    - echo -e "${TXT_BLUE}Testing...${TXT_CLEAR}"
    - poetry env use python3
    - source $(poetry env info --path)/bin/activate
    - pip install dist/*.whl
    - pip list
    - ls -al $(poetry env info --path)/lib/python3.10/site-packages/
    - cd ..  # needed to import installed package instead of local one
    - python3 -c "import wax; print(wax.__version__)"

test_wax_wasm:
  stage: test
  # emscripten image can be used as it contains all needed tools (node and npm).
  image: ${EMSCRIPTEN_IMAGE}

  interruptible: true
  needs:
    - job: wax_wasm_build
      artifacts: true
    - job: wax_wasm_package_generation
      artifacts: true
  tags:
    - public-runner-docker

  script:
    - npm run test

tag_production:
  stage: tag
  extends: .configuration
  only:
    - master
    - develop
  script:
    - echo -e "${TXT_BLUE}Tagging job starting...${TXT_CLEAR}"
    - git remote set-url origin "https://oauth2:${GITLAB_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - echo -e "${TXT_BLUE}Raw version from 'poetry version' is...${TXT_CLEAR}" && poetry version
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        VERSION_TAG="v$(poetry version patch -s)";
      else
        VERSION_TAG="v$(poetry version prerelease -s)";
      fi
    - echo -e "${TXT_BLUE}Current tags are...${TXT_CLEAR}" && git show-ref --tags
    - echo -e "${TXT_BLUE}New tag will be '${VERSION_TAG}'${TXT_CLEAR}"
    - git tag "${VERSION_TAG}"
    - git push -o ci.skip origin "${VERSION_TAG}"

build_wheel_production:
  stage: build_production
  extends: .build_wheel_base
  only:
    - master
    - develop
  variables:
    WAX_SKIP_BUILD: 1

.deploy_base:
  stage: deploy
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Deploying...${TXT_CLEAR}"
    - ls -al dist/
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "${CI_JOB_TOKEN}"
    - poetry publish --repository gitlab

deploy_feature_branch:
  extends: .deploy_base
  needs:
    - job: test_importing_wax
    - job: build_wheel
      artifacts: true
  when: manual
  allow_failure: true
  except:
    - master
    - develop

deploy_production:
  extends: .deploy_base
  needs:
    - job: test_importing_wax
    - job: build_wheel_production
      artifacts: true
  only:
    - master
    - develop

deploy_wax_wasm_dev_package:
  stage: deploy
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$NPM_TOKEN"
    NPM_SCOPE: "@hive"
    NPM_REGISTRY: "gitlab.syncad.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"

  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
    - scripts/npm_publish.sh
  needs:
    - job: test_wax_wasm
    - job: wax_wasm_build
      artifacts: true
  tags: *shared_tags

deploy_wax_wasm_production_public_npm:
  stage: deploy
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$INTERNAL_HIDDEN_PUBLISH_TOKEN" # Add token variable here
    NPM_SCOPE: "@hive-staging"
    NPM_REGISTRY: "registry.npmjs.org/"
  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
    - npm publish --access=public
  needs:
    - job: wax_wasm_build
      artifacts: true
  tags: *shared_tags
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
      allow_failure: true
