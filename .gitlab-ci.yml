stages:
  - build
  - test
  - deploy

variables:
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-7
  CI_BASE_IMAGE_TAG: "@sha256:8f68baf07c6e581e1e8034a1447c4ff1268239fc886bfe4b02aa3f4182bf78bb"
  CI_BASE_IMAGE: "registry.gitlab.syncad.com/hive/hive/ci-base-image${CI_BASE_IMAGE_TAG}"
  # colors:
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"
  NPM_TOKEN: $CI_JOB_TOKEN

include:
  - project: 'hive/common-ci-configuration'
    ref: b5202fecccf40845099da351cbc0c38a6205339c
    file:
      - '/templates/wasm_build.gitlab-ci.yml'
      - '/templates/python_projects.gitlab-ci.yml'

image: "${CI_BASE_IMAGE}"

default:
  tags:
    - public-runner-docker

.configuration:
  before_script:
    - python3 -V
    - poetry self add poetry-grpc-plugin@0.1.7
    - poetry self add "poetry-dynamic-versioning[plugin]"
    - poetry self update
    - pip list
  tags: *shared_tags

build_wheel:
  extends: .build_wheel_template
  before_script:
    - !reference [.build_wheel_template, before_script]
    - git fetch --tags --force
    - rm -rf dist/
    - poetry build --format wheel
    - ls -al dist/
  needs:
    - job: wax_proto_python_generation
      artifacts: true
  artifacts:
    when: always
    paths:
      - "dist/"
      - ".build/logs/"
      - ".build/*.so"

wax_wasm_build:
  extends: .wasm_build_job_template
  stage: build
  variables:
    SOURCE_DIR: "${CI_PROJECT_DIR}/wasm/src/"
    BINARIES_DIR: "${CI_PROJECT_DIR}/build_wasm"

wax_wasm_package_generation:
  stage: build
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$NPM_TOKEN"
    NPM_SCOPE: "@hive"
    NPM_REGISTRY: "gitlab.syncad.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"
  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
  artifacts:
    paths:
      - "$CI_PROJECT_DIR/package.json"

    when: always
    expire_in: 1 week

  tags:
    - public-runner-docker

wax_proto_python_generation:
  stage: build
  extends: .configuration
  script:
    - scripts/compile_proto_python.sh
  artifacts:
    paths:
      - "wax/proto"
    when: always
  tags:
    - public-runner-docker

test_importing_wax:
  stage: test
  extends: .configuration_template
  needs:
    - job: build_wheel
      artifacts: true
  script:
    - echo -e "${TXT_BLUE}Testing...${TXT_CLEAR}"
    - pip install dist/*.whl
    - pip list
    - ls -al $(poetry env info --path)/lib/python3.10/site-packages/
    - cd ..  # needed to import installed package instead of local one
    - python3 -c "import wax; print(wax.__version__)"

test_wax_wasm:
  stage: test
  # emscripten image can be used as it contains all needed tools (node and npm).
  image: ${EMSCRIPTEN_IMAGE}

  interruptible: true
  needs:
    - job: wax_wasm_build
      artifacts: true
    - job: wax_wasm_package_generation
      artifacts: true
  script:
    - npm run test
  allow_failure: true # Temporary - until actual set of tests will be adjusted to web environment

.deploy_wheel_needs: &deploy_wheel_needs
  needs:
    - job: test_wax_python_wheel
    - job: build_wheel
      artifacts: true

deploy_wheel_to_gitlab:
  stage: deploy
  extends: .deploy_wheel_to_gitlab_template
  <<: *deploy_wheel_needs

deploy_wheel_to_pypi:
  extends: .deploy_wheel_to_pypi_template
  stage: deploy
  <<: *deploy_wheel_needs

deploy_wax_wasm_dev_package:
  stage: deploy
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$NPM_TOKEN"
    NPM_SCOPE: "@hive"
    NPM_REGISTRY: "gitlab.syncad.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"

  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
    - scripts/npm_publish.sh
  needs:
    - job: test_wax_wasm
    - job: wax_wasm_build
      artifacts: true

deploy_wax_wasm_production_public_npm:
  stage: deploy
  # emscripten image can be used as it contains all needed tools.
  image: ${EMSCRIPTEN_IMAGE}
  variables:
    PUBLISH_TOKEN: "$INTERNAL_HIDDEN_PUBLISH_TOKEN" # Add token variable here
    NPM_SCOPE: "@hive-staging"
    NPM_REGISTRY: "registry.npmjs.org/"
  script:
    - scripts/bump_npm_version.sh "$PUBLISH_TOKEN" "$NPM_SCOPE" "$NPM_REGISTRY"
    - npm publish --access=public
  needs:
    - job: wax_wasm_build
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
      allow_failure: true
