"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import asset_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class curation_reward(google.protobuf.message.Message):
    """Related to comment_operation and comment_vote_operation.
    Generated during block processing after cashout time passes and comment is eligible for rewards (nonzero reward).
    Note: the reward is a fragment of curators' portion of comment reward depending on share of particular curator in overall
    curation power for the comment. Only generated when nonzero.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CURATOR_FIELD_NUMBER: builtins.int
    REWARD_FIELD_NUMBER: builtins.int
    AUTHOR_FIELD_NUMBER: builtins.int
    PERMLINK_FIELD_NUMBER: builtins.int
    PAYOUT_MUST_BE_CLAIMED_FIELD_NUMBER: builtins.int
    curator: builtins.str
    """@param {string} curator - user that curated the comment (receiver of reward)"""
    @property
    def reward(self) -> asset_pb2.asset:
        """@param {asset} reward - (VESTS) curation reward"""
    author: builtins.str
    """@param {string} author - author of curated comment"""
    permlink: builtins.str
    """@param {string} permlink - permlink of curated comment"""
    payout_must_be_claimed: builtins.bool
    """@param {bool} payout_must_be_claimed - true if payouts require use of claim_reward_balance_operation"""
    def __init__(
        self,
        *,
        curator: builtins.str | None = ...,
        reward: asset_pb2.asset | None = ...,
        author: builtins.str | None = ...,
        permlink: builtins.str | None = ...,
        payout_must_be_claimed: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["author", b"author", "curator", b"curator", "payout_must_be_claimed", b"payout_must_be_claimed", "permlink", b"permlink", "reward", b"reward"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["author", b"author", "curator", b"curator", "payout_must_be_claimed", b"payout_must_be_claimed", "permlink", b"permlink", "reward", b"reward"]) -> None: ...

global___curation_reward = curation_reward
